the_percentage.df$BoxCox_Value <- predict(box_cox_trans, newdata = the_percentage.df)$Value
# Yeo-Johnson Transformation
yeo_johnson_trans <- preProcess(the_percentage.df, method = "YeoJohnson", preProcess = c("YeoJohnson"))
the_percentage.df$YeoJohnson_Value <- predict(yeo_johnson_trans, newdata = the_percentage.df)$Value
# Output the data frame with transformations
print(the_percentage.df)
plot(the_percentage.df$Scaled_Vale, type = "l", color = "blue")
# Box-Cox Transformation
box_cox_trans <- preProcess(the_percentage.df, method = "BoxCox", preProcess = c("BoxCox"))
the_percentage.df$BoxCox_Value <- predict(box_cox_trans, newdata = the_percentage.df$BoxCox_Value)
the_percentage.df <- the_percentage.df %>%
mutate(Log_Scaled_Value = log(Value + 1))
plot(the_percentage.df$Log_Scaled_Value)
the_percentage.df$Log_Scaled_Value
plot(the_percentage.df$Log_Scaled_Value - 3)
the_percentage.df <- the_percentage.df %>%
mutate(Log_Scaled_Value = log(Value))
plot(the_percentage.df$Log_Scaled_Value)
the_percentage.df$Log_Scaled_Value
the_percentage.df <- the_percentage.df %>%
mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
the_percentage.df
the_percentage.df <- the_percentage.df %>%
mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
affortability_index <- 1 - the_percentage.df$Scaled_Value
plot(affortability_index, type = "l")
# Apply mutate to scale the 'Value' within the data frame
the_percentage.df <- the_percentage.df %>%
mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
affortability_index <- 1 - the_percentage.df$Scaled_Value
plot(affortability_index, type = "l")
summary(affortability_index)
View(water_cost.st)
#Step one Lode the all package that necessary.
library (lubridate)    #Simplifies date and time analysis in R.
library (cansim)       #Access and manipulate Canadian statistical data.
library (WDI)          #Fetches global development data from World Bank.
library (fredr)        #Interfaces with Federal Reserve Economic Data.
library (tsbox)        #Time series data conversion and visualization toolkit.
library (RColorBrewer) #: Provides color schemes for maps and charts.
library(wesanderson) #Color palettes inspired by Wes Anderson films.
library(writexl) #rite data frames to Excel without external dependencies.
library(dplyr) #Facilitates data manipulation and analysis.
setwd("~/Documents/GitHub/Sata_Can_intership")
#Step one Lode the all package that necessary.
library (lubridate)    #Simplifies date and time analysis in R.
library (cansim)       #Access and manipulate Canadian statistical data.
library (WDI)          #Fetches global development data from World Bank.
library (fredr)        #Interfaces with Federal Reserve Economic Data.
library (tsbox)        #Time series data conversion and visualization toolkit.
library (RColorBrewer) #: Provides color schemes for maps and charts.
library(wesanderson) #Color palettes inspired by Wes Anderson films.
library(writexl) #rite data frames to Excel without external dependencies.
library(dplyr) #Facilitates data manipulation and analysis.
setwd("~/Documents/GitHub/Sata_Can_intership")
adasdasdasd
setwd("~/Documents/GitHub/Sata_Can_intership")
install.package("weathercan")
install.packages(weathercan)
install.packages("weathercan")
install.packages("weathercan",
repos = c("https://ropensci.r-universe.dev",
"https://cloud.r-project.org"))
head(stations())
station_id
library(weathercan) #downlode the data from the Enviroment and climiate change Canada
excess_time <- bus = 25
#Total_sustainable_transpiration = Public transit + walk and bicycle
TST <- 28.1
#public transit
PT <- 39.1
#bus
bus <- 37.8
#subway
subway <- 44.2
#light_rail
light_rail <- 45.6
#ferry
ferry <- 35.1
#walk
walk <- 13
#bicycle
bick <- 16.2
clear all
#Total_sustainable_transpiration = Public transit + walk and bicycle
TST <- 28.1
#public transit
PT <- 39.1
#bus
bus <- 37.8
#subway
subway <- 44.2
#light_rail
light_rail <- 45.6
#ferry
ferry <- 35.1
#walk
walk <- 13
#bicycle
bick <- 16.2
#bus_index
excess_time <- bus - 25
if (excess_time >= 0){
bus_index <- exp(excess_time/5)
}else(
bus_index <- 1
)
print(bus_index)
###############################################################
#Total_sustainable_transpiration = Public transit + walk and bicycle
TST <- 28.1
#public transit
PT <- 39.1
#bus
bus <- 37.8
#subway
subway <- 44.2
#light_rail
light_rail <- 45.6
#ferry
ferry <- 35.1
#walk
walk <- 13
#bicycle
bick <- 16.2
###############################################################
#angry index
###############################################################
# Function to calculate angry index
calculate_angry_index <- function(commute_time, scale_factor = 5) {
excess_time <- commute_time - 25
if (excess_time >= 0) {
return(exp(excess_time / scale_factor))
} else {
return(1)
}
}
# Calculate angry indices for each mode
bus_angry_index <- calculate_angry_index(bus)
subway_angry_index <- calculate_angry_index(subway)
light_rail_angry_index <- calculate_angry_index(light_rail)
ferry_angry_index <- calculate_angry_index(ferry, 10)  # Using a scale factor of 10 for ferry
###############################################################
# Print indices
print(paste("Bus Angry Index:", bus_angry_index))
print(paste("Subway Angry Index:", subway_angry_index))
print(paste("Light Rail Angry Index:", light_rail_angry_index))
print(paste("Ferry Angry Index:", ferry_angry_index)))
#1. the public transport angry index
###############################################################
#Total_sustainable_transpiration = Public transit + walk and bicycle
TST <- 28.1
#public transit
PT <- 39.1
#bus
bus <- 37.8
#subway
subway <- 44.2
#light_rail
light_rail <- 45.6
#ferry
ferry <- 35.1
#walk
walk <- 13
#bicycle
bick <- 16.2
###############################################################
#angry index
###############################################################
# Function to calculate angry index
calculate_angry_index <- function(commute_time, scale_factor = 5) {
excess_time <- commute_time - 25
if (excess_time >= 0) {
return(exp(excess_time / scale_factor))
} else {
return(1)
}
}
# Calculate angry indices for each mode
bus_angry_index <- calculate_angry_index(bus)
subway_angry_index <- calculate_angry_index(subway)
light_rail_angry_index <- calculate_angry_index(light_rail)
ferry_angry_index <- calculate_angry_index(ferry, 10)  # Using a scale factor of 10 for ferry
###############################################################
# Print indices
print(paste("Bus Angry Index:", bus_angry_index))
print(paste("Subway Angry Index:", subway_angry_index))
print(paste("Light Rail Angry Index:", light_rail_angry_index))
print(paste("Ferry Angry Index:", ferry_angry_index))
YYZ_public_transit_angry_index
YYZ_public_transit <- 44.1
YYZ_active_transportation <- 15.3
YYZ_public_transit_angry_index <- calculate_angry_index(YYZ_public_transit)
YYZ_public_transit_angry_index
###############################################################
# Function to calculate angry index
calculate_angry_index <- function(commute_time, scale_factor = 5) {
excess_time <- (commute_time - 25)/5
if (excess_time >= 0) {
return(exp(excess_time / scale_factor))
} else {
return(1)
}
###############################################################
# Print indices
print(paste("Bus Angry Index:", bus_angry_index))
print(paste("Subway Angry Index:", subway_angry_index))
print(paste("Light Rail Angry Index:", light_rail_angry_index))
print(paste("Ferry Angry Index:", ferry_angry_index))
###############################################################
###############################################################
#using Edmonton(YEG) and Tornoto(YYZ) as example
###############################################################
YEG_public_transit <- 40.6
YEG_active_transportation <- 15
YEG_public_transit_angry_index <- calculate_angry_index(YEG_public_transit)
YYZ_public_transit <- 44.1
YYZ_active_transportation <- 15.3
YYZ_public_transit_angry_index <- calculate_angry_index(YYZ_public_transit)
###############################################################
#how many percentage people have the access to the bus withhin the 500m
###############################################################
YEG_access_transport <- 78.7
YYZ_access_transport <- 85.3
###############################################################
#Commuters using sustainable transportation in census metropolitan areas(2016)
###############################################################
YEG_public_usage <- 24.7
YYz_public_usage <- 12.4
###############################################################
#The public transportation index calcuation
###############################################################
#weight time!
weight_transit_time <- 0.2
weight_active_time  <- 0.2
weight_access <- 0.2
weight_usage <- 0.2
weight_angry <-0.2
###############################################################
#normalize the data
norm_time <- function(time){
return(100 - time)
}
#normalize the percentaged based metrics
normalize_percentage <- function(percentage) {
return(percentage)
}
###############################################################
#calcuation the data
###############################################################
YEG_transit_score <- normalize_time(YEG_public_transit_time)
YYZ_transit_score <- normalize_time(YYZ_public_transit_time)
YEG_active_score <- normalize_time(YEG_active_transportation_time)
YYZ_active_score <- normalize_time(YYZ_active_transportation_time)
YEG_access_score <- normalize_percentage(YEG_access_transport)
YYZ_access_score <- normalize_percentage(YYZ_access_transport)
YEG_usage_score <- normalize_percentage(YEG_public_usage)
YYZ_usage_score <- normalize_percentage(YYZ_public_usage)
###############################################################
#Function
calculate_PTI <- function(transit_score, active_score, access_score, usage_score, transit_angry_index) {
transit_score * weight_transit_time +
active_score * weight_active_time +
access_score * weight_access +
usage_score * weight_usage +
(100 - transit_angry_index) * weight_angry}
###############################################################
YEG_PTI <- calculate_PTI(YEG_transit_score, YEG_active_score, YEG_access_score, YEG_usage_score, YEG_public_transit_angry_index)
YYZ_PTI <- calculate_PTI(YYZ_transit_score, YYZ_active_score, YYZ_access_score, YYZ_usage_score, YYZ_public_transit_angry_index)
###############################################################
print(paste("Edmonton PTI with Angry Index:", YEG_PTI))
print(paste("Toronto PTI with Angry Index:", YYZ_PTI))
print(paste("Edmonton PTI with Angry Index:", YEG_PTI))
print(paste("Toronto PTI with Angry Index:", YYZ_PTI))
###############################################################
# Function to calculate angry index
calculate_angry_index <- function(commute_time, scale_factor = 5) {
excess_time <- (commute_time - 25)/5
if (excess_time >= 0) {
return(exp(excess_time / scale_factor))
} else {
return(1)
}}
###############################################################
# Print indices
print(paste("Bus Angry Index:", bus_angry_index))
print(paste("Subway Angry Index:", subway_angry_index))
print(paste("Light Rail Angry Index:", light_rail_angry_index))
print(paste("Ferry Angry Index:", ferry_angry_index))
###############################################################
###############################################################
#using Edmonton(YEG) and Tornoto(YYZ) as example
###############################################################
YEG_public_transit <- 40.6
YEG_active_transportation <- 15
YEG_public_transit_angry_index <- calculate_angry_index(YEG_public_transit)
YYZ_public_transit <- 44.1
YYZ_active_transportation <- 15.3
YYZ_public_transit_angry_index <- calculate_angry_index(YYZ_public_transit)
###############################################################
#how many percentage people have the access to the bus withhin the 500m
###############################################################
YEG_access_transport <- 78.7
YYZ_access_transport <- 85.3
###############################################################
#Commuters using sustainable transportation in census metropolitan areas(2016)
###############################################################
YEG_public_usage <- 24.7
YYz_public_usage <- 12.4
###############################################################
#The public transportation index calcuation
###############################################################
#weight time!
weight_transit_time <- 0.2
weight_active_time  <- 0.2
weight_access <- 0.2
weight_usage <- 0.2
weight_angry <-0.2
###############################################################
#normalize the data
norm_time <- function(time){
return(100 - time)
}
#normalize the percentaged based metrics
normalize_percentage <- function(percentage) {
return(percentage)
}
###############################################################
#calcuation the data
###############################################################
YEG_transit_score <- normalize_time(YEG_public_transit_time)
YYZ_transit_score <- normalize_time(YYZ_public_transit_time)
YEG_active_score <- normalize_time(YEG_active_transportation_time)
YYZ_active_score <- normalize_time(YYZ_active_transportation_time)
YEG_access_score <- normalize_percentage(YEG_access_transport)
YYZ_access_score <- normalize_percentage(YYZ_access_transport)
YEG_usage_score <- normalize_percentage(YEG_public_usage)
YYZ_usage_score <- normalize_percentage(YYZ_public_usage)
###############################################################
#Function
calculate_PTI <- function(transit_score, active_score, access_score, usage_score, transit_angry_index) {
transit_score * weight_transit_time +
active_score * weight_active_time +
access_score * weight_access +
usage_score * weight_usage +
(100 - transit_angry_index) * weight_angry}
###############################################################
YEG_PTI <- calculate_PTI(YEG_transit_score, YEG_active_score, YEG_access_score, YEG_usage_score, YEG_public_transit_angry_index)
YYZ_PTI <- calculate_PTI(YYZ_transit_score, YYZ_active_score, YYZ_access_score, YYZ_usage_score, YYZ_public_transit_angry_index)
###############################################################
print(paste("Edmonton PTI with Angry Index:", YEG_PTI))
print(paste("Toronto PTI with Angry Index:", YYZ_PTI))
asdasd
c
[]
calculate_angry_index <- function(commute_time, scale_factor = 5) {
excess_time <- (commute_time - 25)/5
if (excess_time >= 0) {
return(exp(excess_time / scale_factor))
} else {
return(1)
}}
print(paste("Bus Angry Index:", bus_angry_index))
print(paste("Subway Angry Index:", subway_angry_index))
print(paste("Light Rail Angry Index:", light_rail_angry_index))
print(paste("Ferry Angry Index:", ferry_angry_index))
YEG_public_transit <- 40.6
YEG_active_transportation <- 15
YEG_public_transit_angry_index <- calculate_angry_index(YEG_public_transit)
YYZ_public_transit <- 44.1
YYZ_active_transportation <- 15.3
YYZ_public_transit_angry_index <- calculate_angry_index(YYZ_public_transit)
YEG_public_transit_angry_index
YYZ_public_transit_angry_index
###############################################################
# Function to calculate angry index
calculate_angry_index <- function(commute_time, scale_factor = 5) {
excess_time <- (commute_time - 25)/1
if (excess_time >= 0) {
return(exp(excess_time / scale_factor))
} else {
return(1)
}}
###############################################################
# Print indices
print(paste("Bus Angry Index:", bus_angry_index))
print(paste("Subway Angry Index:", subway_angry_index))
print(paste("Light Rail Angry Index:", light_rail_angry_index))
print(paste("Ferry Angry Index:", ferry_angry_index))
###############################################################
###############################################################
#using Edmonton(YEG) and Tornoto(YYZ) as example
###############################################################
YEG_public_transit <- 40.6
YEG_active_transportation <- 15
YEG_public_transit_angry_index <- calculate_angry_index(YEG_public_transit)
YYZ_public_transit <- 44.1
YYZ_active_transportation <- 15.3
YYZ_public_transit_angry_index <- calculate_angry_index(YYZ_public_transit)
###############################################################
# Function to calculate angry index
calculate_angry_index <- function(commute_time, scale_factor = 5) {
excess_time <- (commute_time - 25)/1
if (excess_time >= 0) {
return(exp(excess_time / scale_factor))
} else {
return(1)
}}
###############################################################
# Print indices
print(paste("Bus Angry Index:", bus_angry_index))
print(paste("Subway Angry Index:", subway_angry_index))
print(paste("Light Rail Angry Index:", light_rail_angry_index))
print(paste("Ferry Angry Index:", ferry_angry_index))
###############################################################
###############################################################
#using Edmonton(YEG) and Tornoto(YYZ) as example
###############################################################
YEG_public_transit <- 40.6
YEG_active_transportation <- 15
YEG_public_transit_angry_index <- calculate_angry_index(YEG_public_transit)
YYZ_public_transit <- 44.1
YYZ_active_transportation <- 15.3
YYZ_public_transit_angry_index <- calculate_angry_index(YYZ_public_transit)
YEG_public_transit <- 40.6
YEG_active_transportation <- 15
YEG_public_transit_angry_index <- calculate_angry_index(YEG_public_transit)
YYZ_public_transit <- 44.1
YYZ_active_transportation <- 15.3
YYZ_public_transit_angry_index <- calculate_angry_index(YYZ_public_transit)
YEG_access_transport <- 78.7
YYZ_access_transport <- 85.3
YEG_public_usage <- 24.7
YYz_public_usage <- 12.4
weight_transit_time <- 0.2
weight_active_time  <- 0.2
weight_access <- 0.2
weight_usage <- 0.2
weight_angry <-0.2
#normalize the data
norm_time <- function(time){
return(100 - time)
}
#normalize the percentaged based metrics
normalize_percentage <- function(percentage) {
return(percentage)
}
#normalize the data
normalize_time <- function(time){
return(100 - time)
}
#normalize the percentaged based metrics
normalize_percentage <- function(percentage) {
return(percentage)
}
YEG_transit_score <- normalize_time(YEG_public_transit_time)
YEG_transit_score <- normalize_time(YEG_public_transit)
YYZ_transit_score <- normalize_time(YYZ_public_transit)
YEG_active_score <- normalize_time(YEG_active_transportation)
YYZ_active_score <- normalize_time(YYZ_active_transportation)
YEG_access_score <- normalize_percentage(YEG_access_transport)
YYZ_access_score <- normalize_percentage(YYZ_access_transport)
YEG_usage_score <- normalize_percentage(YEG_public_usage)
YYZ_usage_score <- normalize_percentage(YYZ_public_usage)
YYZ_public_usage <- 12.4
YEG_transit_score <- normalize_time(YEG_public_transit)
YYZ_transit_score <- normalize_time(YYZ_public_transit)
YEG_active_score <- normalize_time(YEG_active_transportation)
YYZ_active_score <- normalize_time(YYZ_active_transportation)
YEG_access_score <- normalize_percentage(YEG_access_transport)
YYZ_access_score <- normalize_percentage(YYZ_access_transport)
YEG_usage_score <- normalize_percentage(YEG_public_usage)
YYZ_usage_score <- normalize_percentage(YYZ_public_usage)
calculate_PTI <- function(transit_score, active_score, access_score, usage_score, transit_angry_index) {
transit_score * weight_transit_time +
active_score * weight_active_time +
access_score * weight_access +
usage_score * weight_usage +
(100 - transit_angry_index) * weight_angry}
#Function
calculate_PTI <- function(transit_score, active_score, access_score, usage_score, transit_angry_index) {
transit_score * weight_transit_time +
active_score * weight_active_time +
access_score * weight_access +
usage_score * weight_usage +
transit_angry_index * weight_angry}
###############################################################
YEG_PTI <- calculate_PTI(YEG_transit_score, YEG_active_score, YEG_access_score, YEG_usage_score, YEG_public_transit_angry_index)
YYZ_PTI <- calculate_PTI(YYZ_transit_score, YYZ_active_score, YYZ_access_score, YYZ_usage_score, YYZ_public_transit_angry_index)
###############################################################
print(paste("Edmonton PTI with Angry Index:", YEG_PTI))
print(paste("Toronto PTI with Angry Index:", YYZ_PTI))
YEG_active_score
YYZ_active_score
YEG_access_score
YYZ_access_score
YEG_usage_score
YYZ_usage_score
###############################################################
#Function
calculate_PTI <- function(transit_score, active_score, access_score, usage_score, transit_angry_index) {
transit_score * weight_transit_time +
active_score * weight_active_time +
access_score * weight_access +
usage_score * weight_usage -
transit_angry_index * weight_angry}
###############################################################
YEG_PTI <- calculate_PTI(YEG_transit_score, YEG_active_score, YEG_access_score, YEG_usage_score, YEG_public_transit_angry_index)
YYZ_PTI <- calculate_PTI(YYZ_transit_score, YYZ_active_score, YYZ_access_score, YYZ_usage_score, YYZ_public_transit_angry_index)
###############################################################
print(paste("Edmonton PTI with Angry Index:", YEG_PTI))
print(paste("Toronto PTI with Angry Index:", YYZ_PTI))
