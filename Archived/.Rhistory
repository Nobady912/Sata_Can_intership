######### housing and energy
housing_and_energy_raw <- "v61988967" #the series number for the statstic canada
housing_and_energy.st <- get_cansim_vector(housing_and_energy_raw, start_time = "2000-01-01", end_time = "2023-01-01")
housing_and_energy_year.st <- year(housing_and_energy.st$REF_DATE[1])
housing_and_energy_month.st <- month(housing_and_energy.st$REF_DATE[1])
#transfer data to the time series time
c(housing_and_energy_year.st, housing_and_energy_month.st)
housing_and_energy.ts<- ts(housing_and_energy.st$VALUE, start = c(housing_and_energy_year.st, housing_and_energy_month.st), freq = 4)
#now its time series data!
######### rental_Payment
rental_payment_raw <- "v61988968" #the series number for the statstic canada
rental_payment.st <- get_cansim_vector(rental_payment_raw, start_time = "2000-01-01", end_time = "2023-01-01")
rental_payment_year.st <- year(rental_payment.st$REF_DATE[1])
rental_payment_month.st <- month(rental_payment.st$REF_DATE[1])
#transfer data to the time series time
c(rental_payment_year.st, rental_payment_month.st)
rental_payment.ts<- ts(rental_payment.st$VALUE, start = c(rental_payment_year.st, rental_payment_month.st), freq = 4)
#now its time series data!
######enegy
#v61988972
enegy_raw <- "v61988972" #the series number for the statstic canada
enegy.st <- get_cansim_vector(enegy_raw, start_time = "2000-01-01", end_time = "2023-01-01")
enegy_year.st <- year(enegy.st$REF_DATE[1])
enegy_month.st <- month(enegy.st$REF_DATE[1])
#transfer data to the time series time
c(enegy_year.st, enegy_month.st)
enegy.ts<- ts(enegy.st$VALUE, start = c(enegy_year.st, enegy_month.st), freq = 4)
#now its time series data!
######
#Water supply and sanitation services
#v61988971
water_cost_raw <- "v61988971" #the series number for the statstic canada
water_cost.st <- get_cansim_vector(water_cost_raw, start_time = "2000-01-01", end_time = "2023-01-01")
water_cost_year.st <- year(water_cost.st$REF_DATE[1])
water_cost_month.st <- month(water_cost.st$REF_DATE[1])
#transfer data to the time series time
c(water_cost_year.st, water_cost_month.st)
water_cost.ts<- ts(water_cost.st$VALUE, start = c(water_cost_year.st, water_cost_month.st), freq = 4)
#######
###### Imputed rental fees for housing
#v61988969
Imputed_rental_fees_raw <- "v61988969" #the series number for the statstic canada
Imputed_rental_fees.st <- get_cansim_vector(Imputed_rental_fees_raw, start_time = "2000-01-01", end_time = "2023-01-01")
Imputed_rental_fees_year.st <- year(Imputed_rental_fees.st $REF_DATE[1])
Imputed_rental_fees_month.st <- month(Imputed_rental_fees.st $REF_DATE[1])
#transfer data to the time series time
c(Imputed_rental_fees_year.st, Imputed_rental_fees_month.st)
Imputed_rental_fees.ts<- ts(Imputed_rental_fees.st$VALUE, start = c(Imputed_rental_fees_year.st, Imputed_rental_fees_month.st), freq = 4)
######
The_housing_cost <-  water_cost.ts + enegy.ts + rental_payment.ts + Imputed_rental_fees.ts
plot((diff(log(The_housing_cost),4))*100)
#######
#v61989012 Household final consumption expenditure
final_consumption_raw <- "v61989012" #the series number for the statstic canada
final_consumption.st <- get_cansim_vector(final_consumption_raw, start_time = "2000-01-01", end_time = "2023-01-01")
final_consumption_year.st <- year(final_consumption.st$REF_DATE[1])
final_consumption_month.st <- month(final_consumption.st$REF_DATE[1])
#transfer data to the time series time
c(final_consumption_year.st, final_consumption_month.st)
final_consumption.ts<- ts(final_consumption.st$VALUE, start = c(final_consumption_year.st, final_consumption_month.st), freq = 4)
#now its time series data!
#the percentage of the necessity of the spending in family.
the_percentage <- ((food_spending.ts + rental_payment.ts + enegy.ts)/final_consumption.ts)*100
plot(the_percentage)
#####
the_percentage <- ((food_spending.ts + The_housing_cost)/final_consumption.ts)*100
plot(the_percentage)
##########
#v61988959 food
#v61988967 Housing, water, electricity, gas and other fuels
#v61988968 Paid rental fees for housing
#v61988972 Electricity, gas and other fuels
rm(list = ls())
##########
food_spending_raw <- "v61988959" #the series number for the statstic canada
food_spending.st <- get_cansim_vector(food_spending_raw, start_time = "2000-01-01", end_time = "2023-01-01")
food_spending_year.st <- year(food_spending.st$REF_DATE[1])
food_spending_month.st <- month(food_spending.st$REF_DATE[1])
#transfer data to the time series time
c(food_spending_year.st, food_spending_month.st)
food_spending.ts<- ts(food_spending.st$VALUE, start = c(food_spending_year.st, food_spending_month.st), freq = 4)
#now its time series data!
######### housing and energy
housing_and_energy_raw <- "v61988967" #the series number for the statstic canada
housing_and_energy.st <- get_cansim_vector(housing_and_energy_raw, start_time = "2000-01-01", end_time = "2023-01-01")
housing_and_energy_year.st <- year(housing_and_energy.st$REF_DATE[1])
housing_and_energy_month.st <- month(housing_and_energy.st$REF_DATE[1])
#transfer data to the time series time
c(housing_and_energy_year.st, housing_and_energy_month.st)
housing_and_energy.ts<- ts(housing_and_energy.st$VALUE, start = c(housing_and_energy_year.st, housing_and_energy_month.st), freq = 4)
#now its time series data!
######### rental_Payment
rental_payment_raw <- "v61988968" #the series number for the statstic canada
rental_payment.st <- get_cansim_vector(rental_payment_raw, start_time = "2000-01-01", end_time = "2023-01-01")
rental_payment_year.st <- year(rental_payment.st$REF_DATE[1])
rental_payment_month.st <- month(rental_payment.st$REF_DATE[1])
#transfer data to the time series time
c(rental_payment_year.st, rental_payment_month.st)
rental_payment.ts<- ts(rental_payment.st$VALUE, start = c(rental_payment_year.st, rental_payment_month.st), freq = 4)
#now its time series data!
######enegy
#v61988972
enegy_raw <- "v61988972" #the series number for the statstic canada
enegy.st <- get_cansim_vector(enegy_raw, start_time = "2000-01-01", end_time = "2023-01-01")
enegy_year.st <- year(enegy.st$REF_DATE[1])
enegy_month.st <- month(enegy.st$REF_DATE[1])
#transfer data to the time series time
c(enegy_year.st, enegy_month.st)
enegy.ts<- ts(enegy.st$VALUE, start = c(enegy_year.st, enegy_month.st), freq = 4)
#now its time series data!
######
#Water supply and sanitation services
#v61988971
water_cost_raw <- "v61988971" #the series number for the statstic canada
water_cost.st <- get_cansim_vector(water_cost_raw, start_time = "2000-01-01", end_time = "2023-01-01")
water_cost_year.st <- year(water_cost.st$REF_DATE[1])
water_cost_month.st <- month(water_cost.st$REF_DATE[1])
#transfer data to the time series time
c(water_cost_year.st, water_cost_month.st)
water_cost.ts<- ts(water_cost.st$VALUE, start = c(water_cost_year.st, water_cost_month.st), freq = 4)
#######
###### Imputed rental fees for housing
#v61988969
Imputed_rental_fees_raw <- "v61988969" #the series number for the statstic canada
Imputed_rental_fees.st <- get_cansim_vector(Imputed_rental_fees_raw, start_time = "2000-01-01", end_time = "2023-01-01")
Imputed_rental_fees_year.st <- year(Imputed_rental_fees.st $REF_DATE[1])
Imputed_rental_fees_month.st <- month(Imputed_rental_fees.st $REF_DATE[1])
#transfer data to the time series time
c(Imputed_rental_fees_year.st, Imputed_rental_fees_month.st)
Imputed_rental_fees.ts<- ts(Imputed_rental_fees.st$VALUE, start = c(Imputed_rental_fees_year.st, Imputed_rental_fees_month.st), freq = 4)
######
The_housing_cost <-  water_cost.ts + enegy.ts + rental_payment.ts + Imputed_rental_fees.ts
plot((diff(log(The_housing_cost),4))*100)
#######
#v61989012 Household final consumption expenditure
final_consumption_raw <- "v61989012" #the series number for the statstic canada
final_consumption.st <- get_cansim_vector(final_consumption_raw, start_time = "2000-01-01", end_time = "2023-01-01")
final_consumption_year.st <- year(final_consumption.st$REF_DATE[1])
final_consumption_month.st <- month(final_consumption.st$REF_DATE[1])
#transfer data to the time series time
c(final_consumption_year.st, final_consumption_month.st)
final_consumption.ts<- ts(final_consumption.st$VALUE, start = c(final_consumption_year.st, final_consumption_month.st), freq = 4)
#now its time series data!
#the percentage of the necessity of the spending in family.
the_percentage <- ((food_spending.ts + The_housing_cost)/final_consumption.ts)*100
plot(the_percentage)
# Set up the plot layout
par(mfrow=c(3,2))  # 3 rows, 2 columns
# Plot 1: Year-over-year percentage change in total housing costs
plot(diff(log(The_housing_cost), 4) * 100, main="Annual % Change in Total Housing Costs",
xlab="Year", ylab="% Change", type="l", col="blue")
# Plot 2: Trend in food and housing costs as a percentage of total consumption
plot(the_percentage, main="Necessary Spending (% of Total Consumption)",
xlab="Year", ylab="% of Total Consumption", type="l", col="red")
# Plot 3: Individual components of housing costs
# Rental Payments
plot(diff(log(rental_payment.ts), 4) * 100, main="Annual % Change in Rental Payments",
xlab="Year", ylab="% Change", type="l", col="green")
# Plot 4: Energy Costs
plot(diff(log(enegy.ts), 4) * 100, main="Annual % Change in Energy Costs",
xlab="Year", ylab="% Change", type="l", col="purple")
# Plot 5: Water Costs
plot(diff(log(water_cost.ts), 4) * 100, main="Annual % Change in Water Costs",
xlab="Year", ylab="% Change", type="l", col="orange")
# Plot 6: Imputed Rental Fees
plot(diff(log(Imputed_rental_fees.ts), 4) * 100, main="Annual % Change in Imputed Rental Fees",
xlab="Year", ylab="% Change", type="l", col="brown")
# Resetting the plot layout to default
par(mfrow=c(1,1))
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
# Create a single data frame for plotting
data <- data.frame(
Date = rep(time(The_housing_cost), 5),
Value = c(diff(log(The_housing_cost), 4) * 100,
diff(log(rental_payment.ts), 4) * 100,
diff(log(enegy.ts), 4) * 100,
diff(log(water_cost.ts), 4) * 100,
diff(log(Imputed_rental_fees.ts), 4) * 100),
Category = rep(c("Total Housing Costs", "Rental Payments", "Energy Costs", "Water Costs", "Imputed Rental Fees"), each=length(The_housing_cost)-4)
)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
# Create a single data frame for plotting
data <- data.frame(
Date = rep(time(The_housing_cost), 5),
Value = c(diff(log(The_housing_cost), 4) * 100,
diff(log(rental_payment.ts), 4) * 100,
diff(log(enegy.ts), 4) * 100,
diff(log(water_cost.ts), 4) * 100,
diff(log(Imputed_rental_fees.ts), 4) * 100),
Category = rep(c("Total Housing Costs", "Rental Payments", "Energy Costs", "Water Costs", "Imputed Rental Fees"), each=length(The_housing_cost)-4)
)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
library(tibble)
# Calculate the differences and prepare data for ggplot
data <- tibble(
Date = rep(time(The_housing_cost)[-c(1:4)], 5),  # Exclude the first 4 dates for alignment
Value = c(diff(log(The_housing_cost), 4) * 100,
diff(log(rental_payment.ts), 4) * 100,
diff(log(enegy.ts), 4) * 100,
diff(log(water_cost.ts), 4) * 100,
diff(log(Imputed_rental_fees.ts), 4) * 100),
Category = rep(c("Total Housing Costs", "Rental Payments", "Energy Costs", "Water Costs", "Imputed Rental Fees"), each=length(The_housing_cost)-4)
)
# Convert 'Date' to a proper Date format (make sure the base date aligns with your data)
data$Date <- as.Date(data$Date, origin="1970-01-01")
# Facet plot using ggplot2
ggplot(data, aes(x=Date, y=Value)) +
geom_line() +  # Line plot
facet_wrap(~ Category, scales="free_y") +  # Facet by category with free y scales
labs(title="Annual Percentage Change in Housing Costs and Components",
x="Year",
y="Percentage Change") +
theme_minimal() +
theme(panel.spacing = unit(1, "lines"))  # Adjust spacing between facets
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
library(tibble)
# Assemble the data
data <- tibble(
Date = rep(as.Date(time(The_housing_cost)[-c(1:4)], origin="1970-01-01"), 5),
Value = c(diff(log(food_spending.ts), 4) * 100,
diff(log(rental_payment.ts), 4) * 100,
diff(log(enegy.ts), 4) * 100,
diff(log(water_cost.ts), 4) * 100,
diff(log(Imputed_rental_fees.ts), 4) * 100),
Category = rep(c("Food Spending", "Rental Payments", "Energy Costs", "Water Costs", "Imputed Rental Fees"), each=length(The_housing_cost)-4)
)
# Plot using ggplot2
ggplot(data, aes(x=Date, y=Value, fill=Category)) +
geom_bar(stat="identity", position="stack") +  # Stacked bar chart
scale_fill_brewer(palette="Set3") +  # Color palette
labs(title="Annual Percentage Change in Spending Categories",
x="Year",
y="Percentage Change (Log-Diff)") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45, hjust=1))  # Improve x-axis label readability
##
the_percentage <- ((food_spending.ts +water_cost.ts + enegy.ts + rental_payment.ts + Imputed_rental_fees.ts)/final_consumption.ts)*100
plot(the_percentage)
##
######
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
# Create a data frame for the bar chart
data <- data.frame(
Date = rep(time(final_consumption.ts), 5),
Value = c(food_spending.ts,
water_cost.ts,
enegy.ts,
rental_payment.ts,
Imputed_rental_fees.ts),
Category = rep(c("Food Spending", "Water Costs", "Energy Costs", "Rental Payments", "Imputed Rental Fees"), each=length(final_consumption.ts))
)
# Calculate percentage of each category over total final consumption
data$Percentage = (data$Value / final_consumption.ts) * 100
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
# Assuming all ts objects have the same start and end dates and frequency
# Create a data frame from the ts objects directly
start_year <- start(food_spending.ts)[1]
start_month <- start(food_spending.ts)[2]
end_year <- end(food_spending.ts)[1]
end_month <- end(food_spending.ts)[2]
dates <- seq(from=as.Date(paste(start_year, start_month, "01", sep="-")),
to=as.Date(paste(end_year, end_month, "01", sep="-")),
by="quarter")
data <- data.frame(
Date = dates,
Food = food_spending.ts,
Water = water_cost.ts,
Energy = enegy.ts,
Rental = rental_payment.ts,
ImputedRental = Imputed_rental_fees.ts,
FinalConsumption = final_consumption.ts
)
# Melt the data frame to a long format for plotting with ggplot2
data_long <- pivot_longer(data, cols = Food:ImputedRental, names_to = "Category", values_to = "Value")
# Calculate the percentage
data_long$Percentage <- (data_long$Value / data$FinalConsumption) * 100
the_percentage_sc <- the_percentage %>%
mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
the_percentage_sc <- the_percentage %>% mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
library(dplyr)
the_percentage_sc <- the_percentage
%>% mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
data <- the_percentage %>%
mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
the_percentage.df <- as.data.frame(the_percentage)
the_percentae.scale <- the_percentage.df %>%
mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
the_percentage.df
the_percentae.scale <- the_percentage.df$x %>%
mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
the_percentage.df <- as.data.frame(time(the_percentage))
names(the_percentage.df) <- c("Time")
the_percentage.df$Value <- as.numeric(the_percentage)
the_percentae.scale <- the_percentage.df$x %>%
mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
the_percentage.df
the_percentage.df <- as.data.frame(time(the_percentage))
names(the_percentage.df) <- c("Time")
the_percentage.df$Value <- as.numeric(the_percentage)
the_percentage.df <- as.data.frame(time(the_percentage))
names(the_percentage.df) <- c("Time")
the_percentage.df$Value <- as.numeric(the_percentage)
the_percentae.scale <- the_percentage.df$x %>%
mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
the_percentage.df <- as.data.frame(time(the_percentage))
names(the_percentage.df) <- c("Time")
the_percentage.df$Value <- as.numeric(the_percentage)
the_percentae.scale <- the_percentage.df$Value %>%
mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
if(!"Value" %in% names(the_percentage.df)) {
the_percentage.df <- data.frame(
Time = time(the_percentage),  # this assumes 'the_percentage' is a ts object
Value = as.numeric(the_percentage)
)
}
# Apply mutate to scale the 'Value' within the data frame
the_percentage.df <- the_percentage.df %>%
mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
the_percentage.df
plot(the_percentage.df$Scaled_Value)
plot(1- the_percentage.df$Scaled_Value)
##### the affortability index
the_percentage.df <- as.data.frame(the_percentage)
# Apply mutate to scale the 'Value' within the data frame
the_percentage.df <- the_percentage.df %>%
mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
the_percentage.df <- as.data.frame(the_percentage)
the_percentage.df
the_percentage.df <- the_percentage.df$x %>%
mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
the_percentage.df <- the_percentage.df %>%
mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
##### the affortability index
the_percentage.df <- data.frame(
Time = time(the_percentage),    # Create a time column from the time series index
Value = as.numeric(the_percentage)  # Extract values from the time series
)
# Apply mutate to scale the 'Value' within the data frame
the_percentage.df <- the_percentage.df %>%
mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
affortability_index <- 1 = the_percentage.df$Scaled_Value
affortability_index <- 1 = the_percentage.df$Scaled_Value
affortability_index <- 1 - the_percentage.df$Scaled_Value
affortability_index
plot(affortability_index, type = "l")
plot(the_percentage.df, type = "l")
plot(the_percentage.df$Value, type = "l")
plot(the_percentage.df$Scaled_Value, type = "l")
summary(the_percentage.df$Scaled_Value)
summary(affortability_indexe)
summary(affortability_index)
# Create a data frame from the time series
the_percentage.df <- data.frame(
Time = time(the_percentage),    # Create a time column from the time series index
Value = as.numeric(the_percentage)  # Extract values from the time series
)
# Apply Min-Max scaling to 'Value' within the data frame
the_percentage.df <- the_percentage.df %>%
mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
# Calculate affordability index
affortability_index <- 1 - the_percentage.df$Scaled_Value
plot(affortability_index, type = "l")
the_percentage.df <- the_percentage.df %>%
mutate(Log_Scaled_Value = log(Value + 1))  # Adding 1 to avoid log(0)
plot(the_percentage.df$Scaled_Value, type = "l")
the_percentage.df <- the_percentage.df %>%
mutate(Log_Scaled_Value = log(Value + 1))  # Adding 1 to avoid log(0)
plot(the_percentage.df$Scaled_Value, type = "l")
# Box-Cox Transformation
box_cox_trans <- preProcess(the_percentage.df, method = "BoxCox", preProcess = c("BoxCox"))
library(caret)
# Box-Cox Transformation
box_cox_trans <- preProcess(the_percentage.df, method = "BoxCox", preProcess = c("BoxCox"))
the_percentage.df$BoxCox_Value <- predict(box_cox_trans, newdata = the_percentage.df)$Value
# Yeo-Johnson Transformation
yeo_johnson_trans <- preProcess(the_percentage.df, method = "YeoJohnson", preProcess = c("YeoJohnson"))
the_percentage.df$YeoJohnson_Value <- predict(yeo_johnson_trans, newdata = the_percentage.df)$Value
# Output the data frame with transformations
print(the_percentage.df)
plot(the_percentage.df$BoxCox_Value)
the_percentage.df$BoxCox_Value
plot(the_percentage.df$Scaled_Value)
lines(the_percentage.df$Log_Scaled_Value)
lines(the_percentage.df$BoxCox_Value)
lines(the_percentage.df$YeoJohnson_Value)
# Ensure the data frame is complete with time column for ggplot
the_percentage.df$Time <- as.Date(the_percentage.df$Time, origin = "2000-01-01")
plot(the_percentage.df$Time, the_percentage.df$Scaled_Value, type = "l", col = "blue",
ylim = range(c(the_percentage.df$Scaled_Value, the_percentage.df$Log_Scaled_Value,
the_percentage.df$BoxCox_Value, the_percentage.df$YeoJohnson_Value)),
xlab = "Time", ylab = "Scaled Value", main = "Comparison of Scaling Methods")
# Add other lines
lines(the_percentage.df$Time, the_percentage.df$Log_Scaled_Value, col = "green")
the_percentage.df$Time <- as.Date(the_percentage.df$Time, origin = "2000-01-01")
plot(the_percentage.df$Scaled_Vale, type = "l", color = "blue")
plot(the_percentage.df$Scaled_Vale, type = "l", color = "blue")
library(caret)
# Box-Cox Transformation
box_cox_trans <- preProcess(the_percentage.df, method = "BoxCox", preProcess = c("BoxCox"))
the_percentage.df$BoxCox_Value <- predict(box_cox_trans, newdata = the_percentage.df)$Value
# Yeo-Johnson Transformation
yeo_johnson_trans <- preProcess(the_percentage.df, method = "YeoJohnson", preProcess = c("YeoJohnson"))
the_percentage.df$YeoJohnson_Value <- predict(yeo_johnson_trans, newdata = the_percentage.df)$Value
# Output the data frame with transformations
print(the_percentage.df)
plot(the_percentage.df$Scaled_Vale, type = "l", color = "blue")
plot(the_percentage.df$Scaled_Vale, type = "l", color = "blue")
the_percentage.df$Scaled_Vale
##### the affortability index
the_percentage.df <- data.frame(
Time = time(the_percentage),    # Create a time column from the time series index
Value = as.numeric(the_percentage)  # Extract values from the time series
)
# Apply mutate to scale the 'Value' within the data frame
the_percentage.df <- the_percentage.df %>%
mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
affortability_index <- 1 - the_percentage.df$Scaled_Value
plot(the_percentage.df$Scaled_Value, type = "l")
summary(affortability_index)
#####
library(caret)
# Box-Cox Transformation
box_cox_trans <- preProcess(the_percentage.df, method = "BoxCox", preProcess = c("BoxCox"))
the_percentage.df$BoxCox_Value <- predict(box_cox_trans, newdata = the_percentage.df)$Value
# Yeo-Johnson Transformation
yeo_johnson_trans <- preProcess(the_percentage.df, method = "YeoJohnson", preProcess = c("YeoJohnson"))
the_percentage.df$YeoJohnson_Value <- predict(yeo_johnson_trans, newdata = the_percentage.df)$Value
# Output the data frame with transformations
print(the_percentage.df)
plot(the_percentage.df$Scaled_Vale, type = "l", color = "blue")
# Box-Cox Transformation
box_cox_trans <- preProcess(the_percentage.df, method = "BoxCox", preProcess = c("BoxCox"))
the_percentage.df$BoxCox_Value <- predict(box_cox_trans, newdata = the_percentage.df$BoxCox_Value)
the_percentage.df <- the_percentage.df %>%
mutate(Log_Scaled_Value = log(Value + 1))
plot(the_percentage.df$Log_Scaled_Value)
the_percentage.df$Log_Scaled_Value
plot(the_percentage.df$Log_Scaled_Value - 3)
the_percentage.df <- the_percentage.df %>%
mutate(Log_Scaled_Value = log(Value))
plot(the_percentage.df$Log_Scaled_Value)
the_percentage.df$Log_Scaled_Value
the_percentage.df <- the_percentage.df %>%
mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
the_percentage.df
the_percentage.df <- the_percentage.df %>%
mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
affortability_index <- 1 - the_percentage.df$Scaled_Value
plot(affortability_index, type = "l")
# Apply mutate to scale the 'Value' within the data frame
the_percentage.df <- the_percentage.df %>%
mutate(Scaled_Value = (Value - min(Value)) / (max(Value) - min(Value)))
affortability_index <- 1 - the_percentage.df$Scaled_Value
plot(affortability_index, type = "l")
summary(affortability_index)
View(water_cost.st)
#Step one Lode the all package that necessary.
library (lubridate)    #Simplifies date and time analysis in R.
library (cansim)       #Access and manipulate Canadian statistical data.
library (WDI)          #Fetches global development data from World Bank.
library (fredr)        #Interfaces with Federal Reserve Economic Data.
library (tsbox)        #Time series data conversion and visualization toolkit.
library (RColorBrewer) #: Provides color schemes for maps and charts.
library(wesanderson) #Color palettes inspired by Wes Anderson films.
library(writexl) #rite data frames to Excel without external dependencies.
library(dplyr) #Facilitates data manipulation and analysis.
setwd("~/Documents/GitHub/Sata_Can_intership")
#Step one Lode the all package that necessary.
library (lubridate)    #Simplifies date and time analysis in R.
library (cansim)       #Access and manipulate Canadian statistical data.
library (WDI)          #Fetches global development data from World Bank.
library (fredr)        #Interfaces with Federal Reserve Economic Data.
library (tsbox)        #Time series data conversion and visualization toolkit.
library (RColorBrewer) #: Provides color schemes for maps and charts.
library(wesanderson) #Color palettes inspired by Wes Anderson films.
library(writexl) #rite data frames to Excel without external dependencies.
library(dplyr) #Facilitates data manipulation and analysis.
setwd("~/Documents/GitHub/Sata_Can_intership")
adasdasdasd
setwd("~/Documents/GitHub/Sata_Can_intership")
install.package("weathercan")
install.packages(weathercan)
install.packages("weathercan")
install.packages("weathercan",
repos = c("https://ropensci.r-universe.dev",
"https://cloud.r-project.org"))
head(stations())
station_id
library(weathercan) #downlode the data from the Enviroment and climiate change Canada
